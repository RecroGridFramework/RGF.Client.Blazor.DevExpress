
<RgfFormComponent @ref="_rgfFormRef" EntityParameters="EntityParameters" FormComponent="this"
                  FormGroupLayoutTemplate="FormGroupLayoutTemplate"
                  FormItemLayoutTemplate="FormItemLayoutTemplate">
    <FormTemplate Context="RgfForm">
        <EditForm EditContext="RgfForm.CurrentEditContext">
            <DxTabs RenderMode="TabsRenderMode.OnDemand" ActiveTabIndex="ActiveTabIndex" ActiveTabIndexChanged="ActivateTab">
                @foreach (var tab in RgfForm.FormData.FormTabs)
                {
                    <DxTabPage Text="@tab.Title">
                        <DxFormLayout CaptionPosition="CaptionPosition.Vertical" CssClass="w-100">
                            @foreach (var group in tab.Groups)
                            {
                                if (!string.IsNullOrEmpty(group.Title))
                                {
                                    <h5 class="mt-3 ms-3">@group.Title</h5>
                                }
                                @RgfForm.GetFormGroupLayoutTemplate(new RgfFormGroupLayoutParameters(RgfForm, group))
                            }
                        </DxFormLayout>
                    </DxTabPage>
                }
            </DxTabs>
            @RgfForm.GetFormValidationTemplate()
        </EditForm>
    </FormTemplate>

    <FormItemTemplate>
        <FormItemComponent FormItemParameters="context" />
    </FormItemTemplate>

    <FormValidationTemplate Context="RgfForm">
        <div class="card mt-3">
            <div class="card-body">
                <DxFormLayout>
                    <DxFormLayoutItem ColSpanMd="12">
                        <ValidationSummary />
                    </DxFormLayoutItem>
                </DxFormLayout>
            </div>
        </div>
    </FormValidationTemplate>
</RgfFormComponent>

@inject IJSRuntime _jsRuntime
@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfFormParameters FormParameters { get => EntityParameters.FormParameters; }
    protected IRecroDictService RecroDict => Manager.RecroDict;

    private RgfFormComponent _rgfFormRef { get; set; } = null!;
    public int ActiveTabIndex { get; private set; } = 0;
    public HashSet<int> PreviouslyActiveTabs { get; private set; } = new() { 0 };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        FormParameters.ErrorCssClass = FormParameters.ErrorCssClass ?? "is-invalid";
        FormParameters.ModifiedCssClass = FormParameters.ModifiedCssClass ?? "is-valid";
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var rowIndex = FormParameters.FormViewKey.RowIndex;
        if (rowIndex != -1)
        {
            var buttons = new List<ButtonParameters>() {
                new("dx-icon-chevrondoubleleft", RecroDict.GetRgfUiString("First"), async (arg) => await _rgfFormRef.FirstFormItemAsync()) { Disabled = rowIndex <= 0 },
                new("dx-icon-chevronleft", RecroDict.GetRgfUiString("Prev"), async (arg) => await _rgfFormRef.PrevFormItemAsync()) { Disabled = rowIndex <= 0 },
                new("dx-icon-chevronright", RecroDict.GetRgfUiString("Next"), async (arg) => await _rgfFormRef.NextFormItemAsync()) { Disabled = rowIndex + 1 >= Manager.ItemCount.Value },
                new("dx-icon-chevrondoubleright", RecroDict.GetRgfUiString("Last"), async (arg) => await _rgfFormRef.LastFormItemAsync()) { Disabled = rowIndex + 1 >= Manager.ItemCount.Value } };
            FormParameters.DialogParameters.LeftButtons = buttons;
        }
        else
        {
            FormParameters.DialogParameters.LeftButtons = null;
        }
    }

    public RenderFragment<RgfFormGroupLayoutParameters> FormGroupLayoutTemplate => (param) =>
    @<DxFormLayoutGroup Caption="" Decoration="FormLayoutGroupDecoration.None" BeginRow="true" CssClass="mt-3">
        @foreach (var prop in param.FormGroup.Properties)
    {
        @param.BaseFormComponent.GetFormItemLayoutTemplate(new RgfFormItemParameters(_rgfFormRef, param.FormGroup, prop))
    }
    </DxFormLayoutGroup>;

    public RenderFragment<RgfFormItemParameters> FormItemLayoutTemplate => (param) =>
        param.BaseFormComponent.GetFormItemTemplate(param);

    private void ActivateTab(int index)
    {
        ActiveTabIndex = index;
        PreviouslyActiveTabs.Add(index);
    }
}