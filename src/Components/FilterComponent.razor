
<RgfFilterComponent @ref="_rgfFilterRef" EntityParameters="EntityParameters">
    <FilterTemplate Context="RgfFilterComp">
        <FilterConditionComponent FilterComponent="RgfFilterComp" Condition="RgfFilterComp.Condition" />
    </FilterTemplate>
    <FooterTemplate Context="RgfFilterComp">
        <div class="d-flex flex-row justify-content-start align-items-center">
            <div class="p-1">
                <label class="col-form-label">Query timeout</label>
            </div>
            <div class="p-1">
                <DxSpinEdit T="int?" @bind-Value="RgfFilterComp.PredefinedFilter.QueryTimeout" ShowSpinButtons="false" MinValue="0" style="width:3rem" />
            </div>

            <div class="p-1">
                <DxComboBox TValue="string" TData="string" @bind-Value="RgfFilterComp.PredefinedFilterName" AllowUserInput="true"
                            Data="RgfFilterComp.FilterHandler.PredefinedFilters.Select(e=> e.Name)"
                            TextChanged="OnTextChanged" />
            </div>
            <div class="p-1">
                <DxCheckBox LabelPosition="LabelPosition.Left" @bind-Checked="RgfFilterComp.PredefinedFilter.IsGlobal" Enabled="RgfFilterComp.IsPredefinedFilterAdmin">
                    @RecroDict.GetRgfUiString("Public")
                </DxCheckBox>
            </div>
            <div class="p-1">
                <DxButton IconCssClass="dx-icon-save" title="@RecroDict.GetRgfUiString("Save")"
                          RenderStyleMode="@ButtonRenderStyleMode.Outline"
                          Enabled="!string.IsNullOrEmpty(RgfFilterComp.PredefinedFilter.Name) && (RgfFilterComp.IsPredefinedFilterAdmin || !RgfFilterComp.PredefinedFilter.IsGlobal)"
                          Click="() => RgfFilterComp.OnSavePredefinedFilter()" />
            </div>
            <div class="pt-1 pb-1">
                <DxButton IconCssClass="dx-icon-trash" title="@RecroDict.GetRgfUiString("Delete")"
                          RenderStyleMode="@ButtonRenderStyleMode.Outline"
                          Enabled="!string.IsNullOrEmpty(RgfFilterComp.PredefinedFilter.Key) && (RgfFilterComp.IsPredefinedFilterAdmin || !RgfFilterComp.PredefinedFilter.IsGlobal)"
                          Click="(arg) => RgfFilterComp.OnDeletePredefinedFilter()" />
            </div>
        </div>
        <div class="d-flex flex-row justify-content-between align-items-center mt-2">
            <div class="pt-1">
                <DxCheckBox CheckType="CheckType.Switch" SizeMode="SizeMode.Large" LabelPosition="LabelPosition.Right" @bind-Checked="RgfFilterComp.IsFilterActive">
                    @($"{RecroDict.GetRgfUiString("Off")}/{RecroDict.GetRgfUiString("On")}")
                </DxCheckBox>
            </div>
            <div>
                <DxButton RenderStyle="ButtonRenderStyle.Secondary" Text="@RecroDict.GetRgfUiString("Cancel")" Click="RgfFilterComp.OnCancel" />
                <DxButton RenderStyle="ButtonRenderStyle.Primary" Text="OK" Click="RgfFilterComp.OnOk" />
            </div>
        </div>
    </FooterTemplate>
</RgfFilterComponent>

<style>
    .listbox-multi {
        width: 11rem;
        max-height: 7.5rem;
    }
</style>

@inject IRecroDictService RecroDict
@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfFilterParameters FilterParameters { get => EntityParameters.FilterParameters; }

    private RgfFilterComponent _rgfFilterRef { get; set; } = null!;

    private void OnTextChanged(string value)
    {
        var filter = _rgfFilterRef.FilterHandler.PredefinedFilters.FirstOrDefault(e => e.Name == value);
        _rgfFilterRef.OnSetPredefinedFilter(filter?.Key, value);
    }
}