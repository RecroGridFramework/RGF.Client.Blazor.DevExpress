
<RgfToolbarComponent @ref="_rgfToolbarRef" EntityParameters="EntityParameters">
    <ToolbarTemplate Context="RgfToolbar">
        <div class="card p-1">
            <DxToolbar AdaptivityMinRootItemCount="100">
                <Items>
                    @if (Manager.EntityDesc.Options.GetBoolValue("RGO_ClientMode") != true)
                    {
                        <DxToolbarItem BeginGroup="true" IconCssClass="dx-icon-refresh" Tooltip="@RecroDict.GetRgfUiString("Refresh")" Click="(arg) => RgfToolbar.OnToolbarCommand(ToolbarAction.Refresh)" />
                        @if (Manager.EntityDesc.Options.GetBoolValue("RGO_NoFilter") != true)
                        {
                            <DxToolbarItem IconCssClass="dx-icon-filter" Tooltip="@RecroDict.GetRgfUiString("Filter")" Click="(arg) => RgfToolbar.OnToolbarCommand(ToolbarAction.ShowFilter)"
                                           RenderStyle="@(RgfToolbar.IsFiltered ? ButtonRenderStyle.Info : ButtonRenderStyle.Secondary)" />
                        }
                    }
                    @if (Manager.EntityDesc.Options.GetBoolValue("RGO_NoDetails") != true)
                    {
                        @if (RgfToolbar.BasePermissions.Add)
                        {
                            <DxToolbarItem BeginGroup="true" Tooltip="@RecroDict.GetRgfUiString("New")" IconCssClass="dx-icon-plus"
                                           Click="() => RgfToolbar.OnToolbarCommand(ToolbarAction.Add)" />
                        }
                        @if (RgfToolbar.BasePermissions.Edit)
                        {
                            <DxToolbarItem Tooltip="@RecroDict.GetRgfUiString("Modify")" IconCssClass="dx-icon-edit" Enabled="@RgfToolbar.IsSingleSelectedRow"
                                           Click="() => RgfToolbar.OnToolbarCommand(ToolbarAction.Edit)" />
                        }
                        else if (RgfToolbar.BasePermissions.Read)
                        {
                            <DxToolbarItem Tooltip="@RecroDict.GetRgfUiString("Details")" IconCssClass="dx-icon-description" Enabled="@RgfToolbar.IsSingleSelectedRow"
                                           Click="() => RgfToolbar.OnToolbarCommand(ToolbarAction.Read)" />
                        }
                        @if (RgfToolbar.BasePermissions.Delete)
                        {
                            <DxToolbarItem Tooltip="@RecroDict.GetRgfUiString("Delete")" IconCssClass="dx-icon-trash" Enabled="@RgfToolbar.IsSingleSelectedRow"
                                           Click="() => RgfToolbar.OnDelete()" />
                        }
                    }
                    @if (RgfToolbar.SettingsMenu != null)
                    {
                        <DxToolbarItem BeginGroup="true" Tooltip="@RecroDict.GetRgfUiString("Setup")" CssClass="toolbar-menu">
                            @RgfToolbar.CreateSettingsMenu("dx-icon-preferences")
                        </DxToolbarItem>
                    }
                    @if (RgfToolbar.SelectParam != null && Manager.EntityDesc.Options.GetBoolValue("RGO_SelectMode") == true)
                    {
                        <DxToolbarItem BeginGroup="true" Tooltip="@RecroDict.GetRgfUiString("Select")" IconCssClass="dx-icon-link" Enabled="@RgfToolbar.IsSingleSelectedRow"
                                       RenderStyle="@(RgfToolbar.IsSingleSelectedRow ? ButtonRenderStyle.Success : ButtonRenderStyle.Secondary)"
                                       Click="() => RgfToolbar.OnToolbarCommand(ToolbarAction.Select)" />
                    }
                </Items>
            </DxToolbar>
        </div>
    </ToolbarTemplate>
</RgfToolbarComponent>

<style>
    .toolbar-menu .dxbl-menu-item button.dxbl-btn {
        padding: 0;
    }
</style>

@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfToolbarParameters ToolbarParameters { get => EntityParameters.ToolbarParameters; }
    private IRecroDictService RecroDict => Manager.RecroDict;

    private RgfToolbarComponent _rgfToolbarRef { get; set; } = null!;
}
