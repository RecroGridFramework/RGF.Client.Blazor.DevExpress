<DxPopup Visible="true" ShowFooter="true"
         AllowDrag="true" AllowResize="DialogParameters.Resizable ?? false"
         CloseOnEscape="true"
         CloseOnOutsideClick="false"
         ShowCloseButton="DialogParameters.ShowCloseButton ?? false" Closing="OnClose"
         CssClass="@DialogParameters.CssClass" FooterCssClass="d-block"
         Width="@(DialogParameters.Width ?? "auto")"
         Height="@DialogParameters.Height">
    <HeaderContentTemplate>
        @DialogParameters.Header
    </HeaderContentTemplate>
    <BodyContentTemplate>
        @DialogParameters.Content
        @DialogParameters.DynamicChild
    </BodyContentTemplate>
    <FooterContentTemplate Context="popupElementInfo">
        @if (DialogParameters.FooterTemplate != null)
        {
            @DialogParameters.FooterTemplate
        }
        <div class="d-flex flex-row justify-content-between align-items-center">
            <div class="d-flex justify-content-start">
                @foreach (var button in DialogParameters.LeftButtons ?? [])
                {
                    @if (string.IsNullOrEmpty(button.ChildText) && button.ChildContent == null)
                    {
                        @CreateButton2(button)
                    }
                    else
                    {
                        @CreateButton(button)
                    }
                }
            </div>
            <div class="d-flex justify-content-end">
                @foreach (var button in DialogParameters.PredefinedButtons ?? [])
                {
                    @if (string.IsNullOrEmpty(button.ChildText) && button.ChildContent == null)
                    {
                        @CreateButton2(button)
                    }
                    else
                    {
                        @CreateButton(button)
                    }
                }
            </div>
        </div>
    </FooterContentTemplate>
</DxPopup>

@code {

    [Parameter, EditorRequired]
    public RgfDialogParameters DialogParameters { get; set; } = null!;

    private RenderFragment<ButtonParameters> CreateButton => (button) =>
    @<DxButton RenderStyle="@(button.IsPrimary ? ButtonRenderStyle.Primary : ButtonRenderStyle.Secondary)" title="@button.Title" CssClass="@(button.CssClass ?? "my-1 ms-2")"
                   IconCssClass="@button.IconName" Enabled="@(!button.Disabled)" Click="button.Callback">
        @if (!string.IsNullOrEmpty(button.ChildText))
    {
        @button.ChildText
    }
    else if (button.ChildContent != null)
    {
        @button.ChildContent
    }
    </DxButton>;

    private RenderFragment<ButtonParameters> CreateButton2 => (button) =>
    @<DxButton RenderStyle="@(button.IsPrimary ? ButtonRenderStyle.Primary : ButtonRenderStyle.Secondary)" title="@button.Title" CssClass="@(button.CssClass ?? "my-1 ms-2")"
              IconCssClass="@button.IconName" Enabled="@(!button.Disabled)" Click="button.Callback" />;

    private void OnClose(PopupClosingEventArgs args)
    {
        if (DialogParameters.OnClose != null)
        {
            args.Cancel = DialogParameters.OnClose.Invoke() == false;
        }
    }
}